generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  departmentId        Int
  personnelTypeId     Int
  prefixName          String?
  firstName           String
  lastName            String
  sex                 String
  email               String               @unique
  password            String
  phone               String?
  position            String?
  hireDate            DateTime
  inActive            Boolean              @default(false)
  employmentType      String?
  profilePicturePath  String?
  approveSteps        ApproveStep[]
  auditLogs           AuditLog[]
  Department          Department[]         @relation("DepartmentHead")
  leaveBalances       LeaveBalance[]
  leaveRequests       LeaveRequest[]
  leaveRequestDetails LeaveRequestDetail[]
  notifications       Notification[]
  signatures          Signature[]
  department          Department           @relation(fields: [departmentId], references: [id])
  personnelType       PersonnelType        @relation(fields: [personnelTypeId], references: [id])
  userRanks           User_Rank[]
  userRoles           User_Role[]

  @@index([departmentId], map: "user_departmentId_fkey")
  @@index([personnelTypeId], map: "user_personnelTypeId_fkey")
  @@map("user")
}

model PersonnelType {
  id    Int    @id @default(autoincrement())
  name  String
  Rank  Rank[]
  users User[]

  @@map("personneltype")
}

model Department {
  id             Int          @id @default(autoincrement())
  headId         Int?
  organizationId Int
  name           String
  appointDate    DateTime?
  head           User?        @relation("DepartmentHead", fields: [headId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  users          User[]

  @@index([headId], map: "department_headId_fkey")
  @@index([organizationId], map: "department_organizationId_fkey")
  @@map("department")
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String
  approveSteps ApproveStep[]
  departments  Department[]

  @@map("organization")
}

model AuditLog {
  id             Int          @id @default(autoincrement())
  userId         Int
  leaveRequestId Int
  action         String
  details        String?
  createdAt      DateTime     @default(now())
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([leaveRequestId], map: "auditlog_leaveRequestId_fkey")
  @@index([userId], map: "auditlog_userId_fkey")
  @@map("auditlog")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "notification_userId_fkey")
  @@map("notification")
}

model Role {
  id        Int         @id @default(autoincrement())
  name      String
  userRoles User_Role[]

  @@map("role")
}

model User_Role {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
  @@index([roleId], map: "user_role_roleId_fkey")
  @@map("user_role")
}

model Signature {
  id     Int    @id @default(autoincrement())
  userId Int
  file   String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "signature_userId_fkey")
  @@map("signature")
}

model ApproveStep {
  id             Int          @id @default(autoincrement())
  approveId      Int?
  userId         Int
  organizationId Int
  level          Int
  appointDate    DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([organizationId], map: "approvestep_organizationId_fkey")
  @@index([userId], map: "approvestep_userId_fkey")
  @@map("approvestep")
}

model Approver {
  id   Int    @id @default(autoincrement())
  name String

  @@map("approver")
}

model Rank {
  id              Int           @id @default(autoincrement())
  rank            String
  minHireMonths   Int?
  maxHireMonths   Int?
  receiveDays     Int?
  maxDays         Int?
  isBalance       Boolean?
  personnelTypeId Int
  personnelType   PersonnelType @relation(fields: [personnelTypeId], references: [id])
  userRanks       User_Rank[]

  @@index([personnelTypeId], map: "rank_personnelTypeId_fkey")
  @@map("rank")
}

model User_Rank {
  id     Int  @id @default(autoincrement())
  userId Int
  rankId Int
  rank   Rank @relation(fields: [rankId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, rankId])
  @@index([rankId], map: "user_rank_rankId_fkey")
  @@map("user_rank")
}

model LeaveBalance {
  id            Int       @id @default(autoincrement())
  userId        Int
  leaveTypeId   Int
  maxDays       Int
  usedDays      Int
  pendingDays   Int
  remainingDays Int
  leaveType     LeaveType @relation(fields: [leaveTypeId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@index([leaveTypeId], map: "leavebalance_leaveTypeId_fkey")
  @@index([userId], map: "leavebalance_userId_fkey")
  @@map("leavebalance")
}

model LeaveType {
  id            Int            @id @default(autoincrement())
  name          String
  isAvailable   Boolean        @default(true)
  leaveBalances LeaveBalance[]
  leaveRequests LeaveRequest[]

  @@map("leavetype")
}

model LeaveRequest {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  leaveTypeId         Int
  startDate           DateTime
  endDate             DateTime
  leavedDays          Int
  thisTimeDays        Int
  totalDays           Int
  balanceDays         Int
  reason              String?
  status              LeaveRequestStatus   @default(PENDING)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  documentNumber      String?
  documentIssuedDate  DateTime?
  verifierId          Int?
  receiverId          Int?
  contact             String?
  auditLogs           AuditLog[]
  files               File[]
  leaveType           LeaveType            @relation(fields: [leaveTypeId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  leaveRequestDetails LeaveRequestDetail[]

  @@index([leaveTypeId], map: "leaverequest_leaveTypeId_fkey")
  @@index([userId], map: "leaverequest_userId_fkey")
  @@map("leaverequest")
}

model File {
  id             Int          @id @default(autoincrement())
  leaveRequestId Int
  type           FileType
  filePath       String
  uploadedAt     DateTime     @default(now())
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@index([leaveRequestId], map: "file_leaveRequestId_fkey")
  @@map("file")
}

model LeaveRequestDetail {
  id             Int                @id @default(autoincrement())
  approverId     Int
  leaveRequestId Int
  stepOrder      Int
  status         LeaveRequestStatus @default(PENDING)
  reviewedAt     DateTime?          @default(now())
  remarks        String?
  comment        String?
  approver       User               @relation(fields: [approverId], references: [id])
  leaveRequest   LeaveRequest       @relation(fields: [leaveRequestId], references: [id])

  @@index([approverId])
  @@index([leaveRequestId])
  @@map("leaverequestdetail")
}

model Holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  fiscalYear  Int
  isRecurring Boolean  @default(false)
  holidayType String?

  @@map("holiday")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String
  type        String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("setting")
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FileType {
  EVIDENT
  REPORT
  PAPER
}
