// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  APPROVER
  ADMIN
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AuditLogType {
  CREATED
  UPDATED
  DELETED
}

// enum Faculty {
//   INDUSTRIAL_EDUCATION
//   ENGINEERING
//   BUSINESS_ADMINISTRATION
// }

model Users {
  id                 Int      @id @default(autoincrement())
  prefixName         String
  firstName          String
  lastName           String
  username           String   @unique
  email              String   @unique
  password           String
  phone              String
  position           String
  hireDate           DateTime
  inActive           Boolean  @default(true)
  profilePicturePath String?

  levelId         Int
  personnelTypeId Int
  organizationId  Int
  departmentId    Int

  level         Levels         @relation(fields: [levelId], references: [id])
  personnelType PersonnelTypes @relation(fields: [personnelTypeId], references: [id])
  organization  Organizations  @relation(fields: [organizationId], references: [id])
  department    Departments    @relation(fields: [departmentId], references: [id])

  LeaveRequests           LeaveRequests[]
  LeaveBalances           LeaveBalances[]
  Notifications           Notifications[]
  ApprovalStepsAsApprover ApprovalSteps[] @relation("ApprovalStepApprover")
  ApprovalStepsAsReviewer ApprovalSteps[] @relation("ApprovalStepReviewedBy")
  AuditLogs               AuditLogs[]

  User_Role User_Role[]
}

model User_Role {
  userId Int
  roleId Int

  user Users @relation(fields: [userId], references: [id])
  role Roles @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Roles {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  User_Role User_Role[]
}

model Levels {
  id    Int    @id @default(autoincrement())
  level String

  Users Users[]
}

model Organizations {
  id   Int    @id @default(autoincrement())
  name String

  Organization_Department Organization_Department[]
  Users                   Users[]
}

model Organization_Department {
  id             Int @id @default(autoincrement())
  organizationId Int
  departmentId   Int

  organization Organizations @relation(fields: [organizationId], references: [id])
  department   Departments   @relation(fields: [departmentId], references: [id])
}

model Departments {
  id   Int    @id @default(autoincrement())
  name String

  Users Users[]

  Organization_Department Organization_Department[]
}

model PersonnelTypes {
  id   Int    @id @default(autoincrement())
  name String

  Users Users[]
}

model LeaveTypes {
  id         Int    @id @default(autoincrement())
  name       String @unique
  maxDays    Int
  conditions Json

  LeaveRequests LeaveRequests[]
  LeaveBalances LeaveBalances[]
}

model LeaveRequests {
  id          Int         @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  isEmergency Boolean     @default(false)
  comment     String? //หมายเหตุเพิ่มเติม
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId      Int
  leaveTypeId Int

  user      Users      @relation(fields: [userId], references: [id])
  leaveType LeaveTypes @relation(fields: [leaveTypeId], references: [id])

  ApprovalSteps ApprovalSteps[]
  Attachments   Attachments[]
  AuditLogs     AuditLogs[]
}

model LeaveBalances {
  id            Int @id @default(autoincrement())
  year          Int
  totalDays     Int
  usedDays      Int @default(0)
  remainingDays Int @default(0)

  userId      Int
  leaveTypeId Int

  user      Users      @relation(fields: [userId], references: [id])
  leaveType LeaveTypes @relation(fields: [leaveTypeId], references: [id])
}

model Notifications {
  id        Int      @id @default(autoincrement())
  type      String //ประเภทการแจ้งเตือน เช่น การลาอนุมัติ, การลาปฏิเสธ
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  userId Int

  user Users @relation(fields: [userId], references: [id])
}

model ApprovalSteps {
  id         Int         @id @default(autoincrement())
  stepOrder  Int
  status     LeaveStatus @default(PENDING)
  reviewedAt DateTime?
  remarks    String?

  approverId     Int
  reviewedBy     Int?
  leaveRequestId Int

  approver       Users         @relation("ApprovalStepApprover", fields: [approverId], references: [id])
  reviewedByUser Users?        @relation("ApprovalStepReviewedBy", fields: [reviewedBy], references: [id])
  leaveRequest   LeaveRequests @relation(fields: [leaveRequestId], references: [id])
}

model Attachments {
  id         Int      @id @default(autoincrement())
  fileName   String
  filePath   String
  uploadedAt DateTime @default(now())

  leaveRequestId Int

  leaveRequest LeaveRequests @relation(fields: [leaveRequestId], references: [id])
}

model AuditLogs {
  id        Int      @id @default(autoincrement())
  type      String //created, updated, deleted
  action    String
  details   Json
  createdAt DateTime @default(now())

  userId         Int
  leaveRequestId Int

  user         Users         @relation(fields: [userId], references: [id])
  leaveRequest LeaveRequests @relation(fields: [leaveRequestId], references: [id])
}

model Holidays {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime
  description String?
  recurring   Boolean  @default(false) //วันหยุดที่อาจจะซ้ำทุกปี เช่น วันสงกรานต์
}
