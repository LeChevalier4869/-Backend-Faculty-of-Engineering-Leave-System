generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model approvalsteps {

  id                                    Int                  @id @default(autoincrement())
  stepOrder                             Int
  status                                approvalsteps_status @default(PENDING)
  reviewedAt                            DateTime? @default(now())
  remarks                               String?
  approverId                            Int
  reviewedBy                            Int?
  leaveRequestId                        Int
  users_approvalsteps_approverIdTousers users                @relation("approvalsteps_approverIdTousers", fields: [approverId], references: [id], map: "ApprovalSteps_approverId_fkey")
  leaverequests                         leaverequests        @relation(fields: [leaveRequestId], references: [id], map: "ApprovalSteps_leaveRequestId_fkey")
  users_approvalsteps_reviewedByTousers users?               @relation("approvalsteps_reviewedByTousers", fields: [reviewedBy], references: [id], map: "ApprovalSteps_reviewedBy_fkey")

  @@index([approverId], map: "ApprovalSteps_approverId_fkey")
  @@index([leaveRequestId], map: "ApprovalSteps_leaveRequestId_fkey")
  @@index([reviewedBy], map: "ApprovalSteps_reviewedBy_fkey")
  @@map("approvalsteps")
}

model attachments {

  id             Int           @id @default(autoincrement())
  fileName       String
  filePath       String
  uploadedAt     DateTime      @default(now())
  leaveRequestId Int
  leaverequests  leaverequests @relation(fields: [leaveRequestId], references: [id], map: "Attachments_leaveRequestId_fkey")

  @@index([leaveRequestId], map: "Attachments_leaveRequestId_fkey")
  @@map("attachments")
}

model auditlogs {

  id             Int           @id @default(autoincrement())
  action         String
  details        Json
  createdAt      DateTime      @default(now())
  userId         Int
  leaveRequestId Int
  type           String
  leaverequests  leaverequests @relation(fields: [leaveRequestId], references: [id], map: "AuditLogs_leaveRequestId_fkey")
  users          users         @relation(fields: [userId], references: [id], map: "AuditLogs_userId_fkey")

  @@index([leaveRequestId], map: "AuditLogs_leaveRequestId_fkey")
  @@index([userId], map: "AuditLogs_userId_fkey")
  @@map("auditlogs")
}

model departments {

  id                      Int                       @id @default(autoincrement())
  name                    String
  organization_department organization_department[]
  users                   users[]

  @@map("departments")
}

model holidays {

  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime
  description String?
  recurring   Boolean  @default(false)

  @@map("holidays")
}

model leavebalances {

  id            Int        @id @default(autoincrement())
  year          Int
  totalDays     Int
  usedDays      Int        @default(0)
  userId        Int
  leaveTypeId   Int
  remainingDays Int        @default(0)
  leavetypes    leavetypes @relation(fields: [leaveTypeId], references: [id], map: "LeaveBalances_leaveTypeId_fkey")
  users         users      @relation(fields: [userId], references: [id], map: "LeaveBalances_userId_fkey")

  @@index([leaveTypeId], map: "LeaveBalances_leaveTypeId_fkey")
  @@index([userId], map: "LeaveBalances_userId_fkey")
  @@map("leavebalances")
}

model leaverequests {

  id            Int                  @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  reason        String?
  status        leaverequests_status @default(PENDING)
  isEmergency   Boolean              @default(false)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now())
  userId        Int
  leaveTypeId   Int
  comment       String?
  approvalsteps approvalsteps[]
  attachments   attachments[]
  auditlogs     auditlogs[]
  leavetypes    leavetypes           @relation(fields: [leaveTypeId], references: [id], map: "LeaveRequests_leaveTypeId_fkey")
  users         users                @relation(fields: [userId], references: [id], map: "LeaveRequests_userId_fkey")

  @@index([leaveTypeId], map: "LeaveRequests_leaveTypeId_fkey")
  @@index([userId], map: "LeaveRequests_userId_fkey")
  @@map("leaverequests")
}

model leavetypes {

  id            Int             @id @default(autoincrement())
  name          String          @unique(map: "LeaveTypes_name_key")
  maxDays       Int
  conditions    Json
  leavebalances leavebalances[]
  leaverequests leaverequests[]

  @@map("leavetypes")
}

model levels {

  id    Int     @id @default(autoincrement())
  level String
  users users[]

  @@map("levels")
}

model notifications {

  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  type      String
  users     users    @relation(fields: [userId], references: [id], map: "Notifications_userId_fkey")

  @@index([userId], map: "Notifications_userId_fkey")
  @@map("notifications")
}

model organization_department {

  organizationId Int
  departmentId   Int
  departments    departments   @relation(fields: [departmentId], references: [id], map: "Organization_Department_departmentId_fkey")
  organizations  organizations @relation(fields: [organizationId], references: [id], map: "Organization_Department_organizationId_fkey")

  @@id([organizationId, departmentId])
  @@index([departmentId], map: "Organization_Department_departmentId_fkey")
  @@map("organization_department")
}

model organizations {

  id                      Int                       @id @default(autoincrement())
  name                    String
  organization_department organization_department[]
  users                   users[]

  @@map("organizations")
}

model personneltypes {

  id    Int     @id @default(autoincrement())
  name  String
  users users[]

  @@map("personneltypes")
}

model roles {

  id          Int         @id @default(autoincrement())
  name        String      @unique(map: "Roles_name_key")
  description String?
  user_role   user_role[]

  @@map("roles")
}

model user_role {

  userId Int
  roleId Int
  roles  roles @relation(fields: [roleId], references: [id], map: "User_Role_roleId_fkey")
  users  users @relation(fields: [userId], references: [id], map: "User_Role_userId_fkey")

  @@id([userId, roleId])
  @@index([roleId], map: "User_Role_roleId_fkey")
  @@map("user_role")
}

model users {

  id                                            Int             @id @default(autoincrement())
  prefixName                                    String
  firstName                                     String
  lastName                                      String
  email                                         String          @unique(map: "Users_email_key")
  password                                      String
  position                                      String
  profilePicturePath                            String?
  levelId                                       Int
  personnelTypeId                               Int
  departmentId                                  Int
  hireDate                                      DateTime
  inActive                                      Boolean         @default(true)
  organizationId                                Int
  phone                                         String
  username                                      String          @unique(map: "Users_username_key")
  approvalsteps_approvalsteps_approverIdTousers approvalsteps[] @relation("approvalsteps_approverIdTousers")
  approvalsteps_approvalsteps_reviewedByTousers approvalsteps[] @relation("approvalsteps_reviewedByTousers")
  auditlogs                                     auditlogs[]
  leavebalances                                 leavebalances[]
  leaverequests                                 leaverequests[]
  notifications                                 notifications[]
  user_role                                     user_role[]
  departments                                   departments     @relation(fields: [departmentId], references: [id], map: "Users_departmentId_fkey")
  levels                                        levels          @relation(fields: [levelId], references: [id], map: "Users_levelId_fkey")
  organizations                                 organizations   @relation(fields: [organizationId], references: [id], map: "Users_organizationId_fkey")
  personneltypes                                personneltypes  @relation(fields: [personnelTypeId], references: [id], map: "Users_personnelTypeId_fkey")

  @@index([departmentId], map: "Users_departmentId_fkey")
  @@index([levelId], map: "Users_levelId_fkey")
  @@index([organizationId], map: "Users_organizationId_fkey")
  @@index([personnelTypeId], map: "Users_personnelTypeId_fkey")
  @@map("users")
}

enum approvalsteps_status {
  PENDING
  APPROVED
  REJECTED
}

enum leaverequests_status {
  PENDING
  APPROVED
  REJECTED
}
