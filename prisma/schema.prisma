// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // หรือปรับเป็น provider ที่ใช้งานอยู่
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FileType {
  EVIDENT
  REPORT
  PAPER
}

model user {
  id                 Int      @id @default(autoincrement())
  departmentId       Int
  personnelTypeId    Int
  prefixName         String?
  firstName          String
  lastName           String
  sex                String
  email              String   @unique
  password           String
  phone              String?
  position           String?
  hireDate           DateTime
  inActive           Boolean  @default(false)
  employmentType     String?
  profilePicturePath String?

  // Relations
  department          department           @relation(fields: [departmentId], references: [id])
  personnelType       personnelType        @relation(fields: [personnelTypeId], references: [id])
  auditLogs           auditLog[]
  notifications       notification[]
  userRoles           user_Role[]
  signatures          signature[]
  leaveBalances       leaveBalance[]
  leaveRequests       leaveRequest[]
  leaveRequestDetails leaveRequestDetail[]
  userRanks           user_Rank[]
  approveSteps        approveStep[] // สำหรับนโยบายอนุมัติ (ถ้าใช้ผู้อนุมัติที่เป็นผู้ใช้งาน)

  Department department[] @relation("DepartmentHead")

  @@map("user")
}

model personnelType {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  users user[]
  Rank  rank[]

  @@map("personnelType")
}

model department {
  id             Int       @id @default(autoincrement())
  headId         Int?
  organizationId Int
  name           String
  appointDate    DateTime?

  // Relations
  head         user?        @relation("DepartmentHead", fields: [headId], references: [id])
  organization organization @relation(fields: [organizationId], references: [id])
  users        user[]

  @@map("department")
}

model organization {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  departments  department[]
  approveSteps approveStep[]

  @@map("organization")
}

model auditLog {
  id             Int      @id @default(autoincrement())
  userId         Int
  leaveRequestId Int
  action         String
  details        String?
  createdAt      DateTime @default(now())

  // Relations
  user         user         @relation(fields: [userId], references: [id])
  leaveRequest leaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@map("auditLog")
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())

  // Relations
  user user @relation(fields: [userId], references: [id])

  @@map("notification")
}

model role {
  id   Int    @id @default(autoincrement())
  name String

  // Relations
  userRoles user_Role[]

  @@map("role")
}

model user_Role {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  user user @relation(fields: [userId], references: [id])
  role role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_Role")
}

model signature {
  id     Int    @id @default(autoincrement())
  userId Int
  file   String

  user user @relation(fields: [userId], references: [id])

  @@map("signature")
}

model approveStep {
  id             Int       @id @default(autoincrement())
  approveId      Int? // หากมีการอ้างอิงถึงกระบวนการหรือ policy ภายนอก
  userId         Int
  organizationId Int
  level          Int
  appointDate    DateTime?

  // Relations
  user         user         @relation(fields: [userId], references: [id])
  organization organization @relation(fields: [organizationId], references: [id])

  @@map("approveStep")
}

model approver {cd
  id   Int    @id @default(autoincrement())
  name String
  // อาจมี relation เพิ่มเติมในอนาคต หากต้องการแยกข้อมูลผู้อนุมัติออกจาก User

  @@map("approver")
}

model rank {
  id              Int      @id @default(autoincrement())
  rank            String
  minHireMonths   Int?
  maxHireMonths   Int?
  receiveDays     Int?
  maxDays         Int?
  isBalance       Boolean?
  personnelTypeId Int
  leaveTypeId     Int // nullable สำหรับความปลอดภัย

  // Relations
  userRanks     user_Rank[]
  personnelType personnelType @relation(fields: [personnelTypeId], references: [id])
  leaveType     leaveType     @relation(fields: [leaveTypeId], references: [id])

  @@map("rank")
}

model user_Rank {
  id     Int @id @default(autoincrement())
  userId Int
  rankId Int

  user user @relation(fields: [userId], references: [id])
  rank rank @relation(fields: [rankId], references: [id])

  @@unique([userId, rankId])
  @@map("user_Rank")
}

model leaveBalance {
  id            Int @id @default(autoincrement())
  userId        Int
  leaveTypeId   Int
  maxDays       Int
  usedDays      Int
  pendingDays   Int
  remainingDays Int

  // Relations
  user      user      @relation(fields: [userId], references: [id])
  leaveType leaveType @relation(fields: [leaveTypeId], references: [id])

  @@map("leaveBalance")
}

model leaveType {
  id          Int     @id @default(autoincrement())
  name        String
  isAvailable Boolean @default(true)

  // Relations
  leaveBalances leaveBalance[]
  leaveRequests leaveRequest[]
  Rank          rank[]

  @@map("leaveType")
}

model leaveRequest {
  id                 Int                @id @default(autoincrement())
  userId             Int
  leaveTypeId        Int
  startDate          DateTime
  endDate            DateTime
  leavedDays         Int
  thisTimeDays       Int
  totalDays          Int
  balanceDays        Int
  reason             String?
  status             LeaveRequestStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  documentNumber     String?
  documentIssuedDate DateTime?
  verifierId         Int?
  receiverId         Int?
  contact            String?

  // Relations
  user                user                 @relation(fields: [userId], references: [id])
  leaveType           leaveType            @relation(fields: [leaveTypeId], references: [id])
  auditLogs           auditLog[]
  files               file[]
  leaveRequestDetails leaveRequestDetail[]

  @@map("leaveRequest")
}

model file {
  id             Int      @id @default(autoincrement())
  leaveRequestId Int
  type           FileType
  filePath       String
  uploadedAt     DateTime @default(now())

  // Relations
  leaveRequest leaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@map("file")
}

model leaveRequestDetail {
  id             Int                @id @default(autoincrement())
  approverId     Int
  leaveRequestId Int
  stepOrder      Int
  status         LeaveRequestStatus @default(PENDING)
  reviewedAt     DateTime?          @default(now())
  remarks        String?
  comment        String?

  // Relations
  approver     user         @relation(fields: [approverId], references: [id])
  leaveRequest leaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@index([approverId])
  @@index([leaveRequestId])
  @@map("leaveRequestDetail")
}

model holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  fiscalYear  Int
  isRecurring Boolean  @default(false)
  holidayType String?

  @@map("holiday")
}

model setting {
  id          Int      @id @default(autoincrement())
  key         String
  type        String
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("setting")
}
