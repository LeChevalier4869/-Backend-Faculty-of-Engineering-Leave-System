const cron = require("node-cron");
const prisma = require("../config/prisma");
const UserService = require("../services/user-service");

async function resetLeaveBalance() {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Leave Balance");

  const fiscalYearSetting = await prisma.setting.findUnique({
    where: { key: "fiscalYear" },
  });

  const year = fiscalYearSetting
    ? parseInt(fiscalYearSetting.value)
    : new Date().getFullYear();

  // üü° ‡∏î‡∏∂‡∏á LeaveBalance ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
  const oldLeaveBalances = await prisma.leaveBalance.findMany({
    where: { year },
  });
  const existingMap = new Map();
  for (const lb of oldLeaveBalances) {
    const key = `${lb.userId}-${lb.leaveTypeId}`;
    existingMap.set(key, true);
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_Rank ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  await prisma.userRank.deleteMany({});
  console.log("üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_Rank ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

  // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° personnelType ‡πÅ‡∏•‡∏∞ hireDate
  const users = await prisma.user.findMany({
    select: {
      id: true,
      personnelTypeId: true,
      hireDate: true,
    },
  });
  console.log(`üë• ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${users.length} ‡∏Ñ‡∏ô`);

  // 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á user_Rank ‡πÅ‡∏•‡∏∞ leaveBalance ‡πÉ‡∏´‡∏°‡πà
  for (const user of users) {
    const { id, personnelTypeId, hireDate } = user;
    if (!personnelTypeId || !hireDate) continue;

    await UserService.assignRankToUser(id, personnelTypeId, new Date(hireDate));

    const userRanks = await prisma.userRank.findMany({
      where: { userId: id },
      include: { rank: true },
    });

    for (const ur of userRanks) {
      const { leaveTypeId, maxDays, receiveDays } = ur.rank;
      if (!leaveTypeId || maxDays === null) continue;

      const key = `${id}-${leaveTypeId}`;
      if (!existingMap.has(key)) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        await prisma.leaveBalance.create({
          data: {
            userId: id,
            leaveTypeId,
            maxDays,
            usedDays: 0,
            pendingDays: 0,
            remainingDays: receiveDays,
            year,
          },
        });
        console.log(
          `‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° LeaveBalance ‡πÉ‡∏´‡πâ userId ${id}, leaveType ${leaveTypeId}`
        );
      }
    }
  }

  console.log("üéâ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Leave Balance ‡πÅ‡∏•‡∏∞ Rank ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
}

// //             üîÅ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ï.‡∏Ñ. ‡πÄ‡∏ß‡∏•‡∏≤ 00:00
// //             ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏ô‡∏≤‡∏ó‡∏µ (0 - 59)
// //             ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (0 - 23)
// //             ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (1 - 31)
// //             ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (1 - 12)
// //             ‚îÇ ‚îÇ ‚îÇ ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (0 - 7) (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠ 0 ‡∏´‡∏£‡∏∑‡∏≠ 7)
// //             ‚îÇ ‚îÇ ‚îÇ ‚îÇ  ‚îÇ
// //             ‚îÇ ‚îÇ ‚îÇ ‚îÇ  ‚îÇ
// //             * * * *  *
// cron.schedule("0 0 1 10 *", async () => {
//   console.log("üïõ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leave Balance (1 ‡∏ï.‡∏Ñ.)");
//   await resetLeaveBalance();
// });

cron.schedule("0 0 * * *", async () => {
  // const today = new Date();
  const today = new Date("2026-01-01T00:00:00");
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Leave Balance
  if (today.getMonth() === 9 && today.getDate() === 1) {
    console.log("üïõ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leave Balance (1 ‡∏ï.‡∏Ñ.)");

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏ô setting
    const fiscalYear = await prisma.setting.update({
      where: { key: "fiscalYear" },
      data: { value: String(today.getFullYear() + 1) },
    });
    console.log("‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", fiscalYear.value);

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Leave Balance
    await resetLeaveBalance();
  }
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏µ‡πÉ‡∏ô setting, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
  if (today.getMonth() === 0 && today.getDate() === 1) {
    const currentYearSetting = await prisma.setting.update({
      where: { key: "currentYear" },
      data: { value: today.getFullYear().toString() },
    });
    const currentYear = parseInt(currentYearSetting.value, 10);
    console.log("‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", currentYear);

    // ‡∏î‡∏∂‡∏á holiday ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô recurring
    const recurringHolidays = await prisma.holiday.findMany({
      where: { isRecurring: true },
    });

    for (const h of recurringHolidays) {
      const oldDate = new Date(h.date);
      const newDate = new Date(
        currentYear,
        oldDate.getMonth(),
        oldDate.getDate()
      );

      // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ holiday ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ currentYear ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existing = await prisma.holiday.findFirst({
        where: {
          date: newDate,
          description: h.description,
          fiscalYear: currentYear,
        },
      });

      if (!existing) {
        await prisma.holiday.create({
          data: {
            date: newDate,
            description: h.description,
            fiscalYear: currentYear,
            isRecurring: true,
            holidayType: h.holidayType,
          },
        });

        console.log(
          `‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${h.description} (${newDate.toDateString()})`
        );
      } else {
        console.log(
          `‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° ${h.description} (${newDate.toDateString()}) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß`
        );
      }
    }
  }
});
